using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Core.Constants;
using Core.Entities;
using Core.Helpers;
using DataAccess.Persistance.Contexts;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;

namespace DataAccess.Persistance.Seeding
{
    public static class SeedData
    {
        public static async Task Seed(BlogContext context, UserManager<User> userManager, RoleManager<Role> roleManager)
        {
            if (!(await context.Database.GetPendingMigrationsAsync()).Any())
            {
                #region Roles

                if (!await roleManager.RoleExistsAsync(Roles.ADMIN))
                {
                    var role = new Role
                    {
                        Description = "Full access",
                        Name = Roles.ADMIN
                    };
                    await roleManager.CreateAsync(role);
                }

                if (!await roleManager.RoleExistsAsync(Roles.USER))
                {
                    var role = new Role
                    {
                        Description = "Limited access",
                        Name = Roles.USER
                    };
                    await roleManager.CreateAsync(role);
                }

                #endregion

                #region Users

                var bloger = new User
                {
                    Description = "I am new user.",
                    Email = "user@gmail.com",
                    EmailConfirmed = true,
                    FullName = "User User",
                    UserName = "User"
                };

                if (await userManager.FindByNameAsync("Admin") is null)
                {
                    var user = new User
                    {
                        Description = "I am admin of this blog site.",
                        Email = "abiyevkamil.dev@gmail.com",
                        EmailConfirmed = true,
                        FullName = "Kamil Abiyev",
                        UserName = "Admin"
                    };
                    await userManager.CreateAsync(user, "123456");
                    await userManager.AddToRoleAsync(user, Roles.ADMIN);
                }

                if (await userManager.FindByNameAsync("User") is null)
                {
                    await userManager.CreateAsync(bloger, "123456");
                }

                #endregion

                #region Categories

                if (!await context.Categories.AnyAsync())
                {
                    var categories = new List<Category>
                    {
                        new Category
                        {
                            Name = "Tech"
                        },
                        new Category
                        {
                            Name = "Health"
                        },
                        new Category
                        {
                            Name = "Personal"
                        },
                        new Category
                        {
                            Name = "Fashion"
                        },
                        new Category
                        {
                            Name = "Travel"
                        },
                        new Category
                        {
                            Name = "Lifestyle"
                        },
                    };

                    await context.Categories.AddRangeAsync(categories);
                    await context.SaveChangesAsync();
                }

                #endregion

                #region Blogs

                var blogs = new List<Blog>
                {
                    new Blog
                    {
                        Banner = "defaultBlog.jpg",
                        CategoryId = 1,
                        User = bloger,
                        UniqueUrl = UrlGenerator.Generate("Blog 1"),
                        Title = "Blog 1",
                        Content =
                            $"The SeedLinked Seed Search & Marketplace is powered by reviews, comments, and photos generated by growers participating in collaborative trials on the platform. We invite you to be part of our mission to make the seed system more collaborative and transparent by signing up to be part of trials on SeedLinked in 2022! When you participate in trials you get to grow new and exciting varieties before they are released commercially, to help provide vital feedback on how the varieties perform, and instant access to trial results when you submit your feedback."
                    },
                    new Blog
                    {
                        Banner = "defaultBlog.jpg",
                        CategoryId = 1,
                        User = bloger,
                        UniqueUrl = UrlGenerator.Generate("Blog 2"),
                        Title = "Blog 2",
                        Content =
                            $"The SeedLinked Seed Search & Marketplace is powered by reviews, comments, and photos generated by growers participating in collaborative trials on the platform. We invite you to be part of our mission to make the seed system more collaborative and transparent by signing up to be part of trials on SeedLinked in 2022! When you participate in trials you get to grow new and exciting varieties before they are released commercially, to help provide vital feedback on how the varieties perform, and instant access to trial results when you submit your feedback."
                    },
                    new Blog
                    {
                        Banner = "defaultBlog.jpg",
                        CategoryId = 2,
                        User = bloger,
                        UniqueUrl = UrlGenerator.Generate("Blog 3"),
                        Title = "Blog 3",
                        Content =
                            $"The SeedLinked Seed Search & Marketplace is powered by reviews, comments, and photos generated by growers participating in collaborative trials on the platform. We invite you to be part of our mission to make the seed system more collaborative and transparent by signing up to be part of trials on SeedLinked in 2022! When you participate in trials you get to grow new and exciting varieties before they are released commercially, to help provide vital feedback on how the varieties perform, and instant access to trial results when you submit your feedback."
                    },
                    new Blog
                    {
                        Banner = "defaultBlog.jpg",
                        CategoryId = 2,
                        User = bloger,
                        UniqueUrl = UrlGenerator.Generate("Blog 4"),
                        Title = "Blog 4",
                        Content =
                            $"The SeedLinked Seed Search & Marketplace is powered by reviews, comments, and photos generated by growers participating in collaborative trials on the platform. We invite you to be part of our mission to make the seed system more collaborative and transparent by signing up to be part of trials on SeedLinked in 2022! When you participate in trials you get to grow new and exciting varieties before they are released commercially, to help provide vital feedback on how the varieties perform, and instant access to trial results when you submit your feedback."
                    },
                };
                if (!await context.Blogs.AnyAsync())
                {
                    await context.Blogs.AddRangeAsync(blogs);
                    await context.SaveChangesAsync();
                }

                #endregion

                #region Comments

                if (!await context.Comments.AnyAsync())
                {
                    var comments = new List<Comment>
                    {
                        new Comment
                        {
                            Blog = blogs.First(),
                            Content = "Awesome Blog",
                            User = bloger
                        },
                        new Comment
                        {
                            Blog = blogs.First(),
                            Content = "Awesome Blog",
                            User = bloger
                        },
                        new Comment
                        {
                            Blog = blogs.First(),
                            Content = "Awesome Blog",
                            User = bloger
                        },
                    };

                    await context.Comments.AddRangeAsync(comments);
                    await context.SaveChangesAsync();
                }

                #endregion
            }
        }
    }
}